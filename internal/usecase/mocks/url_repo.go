// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "url/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// UrlRepo is an autogenerated mock type for the urlRepo type
type UrlRepo struct {
	mock.Mock
}

type UrlRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UrlRepo) EXPECT() *UrlRepo_Expecter {
	return &UrlRepo_Expecter{mock: &_m.Mock}
}

// CreateUrl provides a mock function with given fields: url
func (_m *UrlRepo) CreateUrl(url *model.URL) (*model.URL, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for CreateUrl")
	}

	var r0 *model.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.URL) (*model.URL, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(*model.URL) *model.URL); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.URL) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UrlRepo_CreateUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUrl'
type UrlRepo_CreateUrl_Call struct {
	*mock.Call
}

// CreateUrl is a helper method to define mock.On call
//   - url *model.URL
func (_e *UrlRepo_Expecter) CreateUrl(url interface{}) *UrlRepo_CreateUrl_Call {
	return &UrlRepo_CreateUrl_Call{Call: _e.mock.On("CreateUrl", url)}
}

func (_c *UrlRepo_CreateUrl_Call) Run(run func(url *model.URL)) *UrlRepo_CreateUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.URL))
	})
	return _c
}

func (_c *UrlRepo_CreateUrl_Call) Return(_a0 *model.URL, _a1 error) *UrlRepo_CreateUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UrlRepo_CreateUrl_Call) RunAndReturn(run func(*model.URL) (*model.URL, error)) *UrlRepo_CreateUrl_Call {
	_c.Call.Return(run)
	return _c
}

// FindUrl provides a mock function with given fields: shortUrl
func (_m *UrlRepo) FindUrl(shortUrl string) (*model.URL, error) {
	ret := _m.Called(shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for FindUrl")
	}

	var r0 *model.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.URL, error)); ok {
		return rf(shortUrl)
	}
	if rf, ok := ret.Get(0).(func(string) *model.URL); ok {
		r0 = rf(shortUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UrlRepo_FindUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUrl'
type UrlRepo_FindUrl_Call struct {
	*mock.Call
}

// FindUrl is a helper method to define mock.On call
//   - shortUrl string
func (_e *UrlRepo_Expecter) FindUrl(shortUrl interface{}) *UrlRepo_FindUrl_Call {
	return &UrlRepo_FindUrl_Call{Call: _e.mock.On("FindUrl", shortUrl)}
}

func (_c *UrlRepo_FindUrl_Call) Run(run func(shortUrl string)) *UrlRepo_FindUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UrlRepo_FindUrl_Call) Return(_a0 *model.URL, _a1 error) *UrlRepo_FindUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UrlRepo_FindUrl_Call) RunAndReturn(run func(string) (*model.URL, error)) *UrlRepo_FindUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewUrlRepo creates a new instance of UrlRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlRepo {
	mock := &UrlRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
